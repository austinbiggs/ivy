"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetDefaultsPlugin = exports.ONLY_MODIFIES_EXISTING_TARGET = void 0;
const minimatch_1 = require("minimatch");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const fileutils_1 = require("../../utils/fileutils");
const globs_1 = require("../../utils/globs");
const package_json_workspaces_1 = require("../package-json-workspaces");
/**
 * This symbol marks that a target provides information which should modify a target already registered
 * on the project via other plugins. If the target has not already been registered, and this symbol is true,
 * the information provided by it will be discarded.
 */
exports.ONLY_MODIFIES_EXISTING_TARGET = Symbol('ONLY_MODIFIES_EXISTING_TARGET');
exports.TargetDefaultsPlugin = {
    name: 'nx/core/target-defaults',
    createNodes: [
        '{package.json,**/package.json,project.json,**/project.json}',
        (configFile, _, ctx) => {
            const fileName = (0, node_path_1.basename)(configFile);
            const root = (0, node_path_1.dirname)(configFile);
            const packageManagerWorkspacesGlob = (0, globs_1.combineGlobPatterns)((0, package_json_workspaces_1.getGlobPatternsFromPackageManagerWorkspaces)(ctx.workspaceRoot));
            // Only process once if package.json + project.json both exist
            if (fileName === 'package.json' &&
                (0, node_fs_1.existsSync)((0, node_path_1.join)(ctx.workspaceRoot, root, 'project.json'))) {
                return {};
            }
            else if (fileName === 'package.json' &&
                !(0, minimatch_1.minimatch)(configFile, packageManagerWorkspacesGlob)) {
                return {};
            }
            // If no target defaults, this does nothing
            const targetDefaults = ctx.nxJsonConfiguration?.targetDefaults;
            if (!targetDefaults) {
                return {};
            }
            const projectJson = readJsonOrNull((0, node_path_1.join)(ctx.workspaceRoot, root, 'project.json'));
            const packageJson = readJsonOrNull((0, node_path_1.join)(ctx.workspaceRoot, root, 'package.json'));
            const includedScripts = packageJson?.nx?.includedScripts;
            const projectDefinedTargets = new Set([
                ...Object.keys(packageJson?.scripts ?? {}).filter((script) => {
                    if (includedScripts) {
                        return includedScripts.includes(script);
                    }
                    return true;
                }),
                ...Object.keys(projectJson?.targets ?? {}),
            ]);
            const executorToTargetMap = getExecutorToTargetMap(packageJson, projectJson);
            const newTargets = {};
            for (const defaultSpecifier in targetDefaults) {
                const targetName = executorToTargetMap.get(defaultSpecifier) ?? defaultSpecifier;
                newTargets[targetName] = structuredClone(targetDefaults[defaultSpecifier]);
                // TODO: Remove this after we figure out a way to define new targets
                // in target defaults
                if (!projectDefinedTargets.has(targetName)) {
                    newTargets[targetName][exports.ONLY_MODIFIES_EXISTING_TARGET] = true;
                }
            }
            return {
                projects: {
                    [root]: {
                        targets: newTargets,
                    },
                },
            };
        },
    ],
};
function getExecutorToTargetMap(packageJson, projectJson) {
    const executorToTargetMap = new Map();
    if (packageJson?.scripts) {
        for (const script in packageJson.scripts) {
            executorToTargetMap.set('nx:run-script', script);
        }
    }
    if (projectJson?.targets) {
        for (const target in projectJson.targets) {
            if (projectJson.targets[target].executor) {
                executorToTargetMap.set(projectJson.targets[target].executor, target);
            }
            else if (projectJson.targets[target].command) {
                executorToTargetMap.set('nx:run-commands', target);
            }
        }
    }
    return executorToTargetMap;
}
function readJsonOrNull(path) {
    if ((0, node_fs_1.existsSync)(path)) {
        return (0, fileutils_1.readJsonFile)(path);
    }
    else {
        return null;
    }
}
