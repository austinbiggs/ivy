"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentGeneratorInternal = exports.componentGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const react_1 = require("@nx/react");
const styles_1 = require("../../utils/styles");
const artifact_name_and_directory_utils_1 = require("@nx/devkit/src/generators/artifact-name-and-directory-utils");
// TODO(v18): Remove this logic once we no longer derive directory.
function maybeGetDerivedDirectory(host, options) {
    if (!options.project)
        return options.directory;
    const workspace = (0, devkit_1.getProjects)(host);
    const projectType = workspace.get(options.project).projectType;
    return options.directory
        ? options.directory
        : projectType === 'application'
            ? 'components'
            : undefined;
}
async function componentGenerator(host, schema) {
    return componentGeneratorInternal(host, {
        nameAndDirectoryFormat: 'derived',
        ...schema,
    });
}
exports.componentGenerator = componentGenerator;
/*
 * This schematic is basically the React one, but for Next we need
 * extra dependencies for css, sass, less style options.
 */
async function componentGeneratorInternal(host, options) {
    const { artifactName: name, directory, project: projectName, } = await (0, artifact_name_and_directory_utils_1.determineArtifactNameAndDirectoryOptions)(host, {
        artifactType: 'component',
        callingGenerator: '@nx/next:component',
        name: options.name,
        directory: options.directory,
        derivedDirectory: maybeGetDerivedDirectory(host, options),
        flat: options.flat,
        nameAndDirectoryFormat: options.nameAndDirectoryFormat,
        project: options.project,
        fileExtension: 'tsx',
        pascalCaseFile: options.pascalCaseFiles,
        pascalCaseDirectory: options.pascalCaseDirectory,
    });
    const componentInstall = await (0, react_1.componentGenerator)(host, {
        ...options,
        name,
        nameAndDirectoryFormat: 'as-provided', // already determined the directory so use as is
        project: undefined,
        directory,
        classComponent: false,
        routing: false,
        skipFormat: true,
    });
    const project = (0, devkit_1.readProjectConfiguration)(host, projectName);
    const styledInstall = (0, styles_1.addStyleDependencies)(host, {
        style: options.style,
        swc: !host.exists((0, devkit_1.joinPathFragments)(project.root, '.babelrc')),
    });
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(host);
    }
    return (0, devkit_1.runTasksInSerial)(styledInstall, componentInstall);
}
exports.componentGeneratorInternal = componentGeneratorInternal;
exports.default = componentGenerator;
