"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customServerGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
async function customServerGenerator(host, options) {
    const project = (0, devkit_1.readProjectConfiguration)(host, options.project);
    if (project.targets?.build?.executor !== '@nx/next:build' &&
        project.targets?.build?.executor !== '@nrwl/next:build') {
        devkit_1.logger.error(`Project ${options.project} is not a Next.js project. Did you generate it with "nx g @nx/next:app"?`);
        return;
    }
    const outputPath = project.targets?.build?.options?.outputPath;
    const root = project.root;
    if (!root ||
        !outputPath ||
        !project.targets?.build?.configurations?.development ||
        !project.targets?.build?.configurations?.production) {
        devkit_1.logger.error(`Project ${options.project} has invalid config. Did you generate it with "nx g @nx/next:app"?`);
        return;
    }
    if (project.targets?.['build-custom-server'] ||
        project.targets?.['serve-custom-server']) {
        devkit_1.logger.warn(`Project ${options.project} has custom server targets already: build-custom-server, serve-custom-server. Remove these targets from project and try again.`);
        return;
    }
    (0, devkit_1.generateFiles)(host, (0, path_1.join)(__dirname, 'files'), project.root, {
        ...options,
        offsetFromRoot: (0, devkit_1.offsetFromRoot)(project.root),
        projectRoot: project.root,
        tmpl: '',
    });
    project.targets.build.dependsOn = ['build-custom-server'];
    project.targets.serve.options.customServerTarget = `${options.project}:serve-custom-server`;
    project.targets.serve.configurations.development.customServerTarget = `${options.project}:serve-custom-server:development`;
    project.targets.serve.configurations.production.customServerTarget = `${options.project}:serve-custom-server:production`;
    project.targets['build-custom-server'] = {
        executor: '@nx/js:tsc',
        defaultConfiguration: 'production',
        options: {
            outputPath,
            main: `${root}/server/main.ts`,
            tsConfig: `${root}/tsconfig.server.json`,
            clean: false,
            assets: [],
        },
        configurations: {
            development: {},
            production: {},
        },
    };
    project.targets['serve-custom-server'] = {
        executor: '@nx/js:node',
        defaultConfiguration: 'production',
        options: {
            buildTarget: `${options.project}:build-custom-server`,
        },
        configurations: {
            development: {
                buildTarget: `${options.project}:build-custom-server:development`,
            },
            production: {
                buildTarget: `${options.project}:build-custom-server:production`,
            },
        },
    };
    (0, devkit_1.updateProjectConfiguration)(host, options.project, project);
    (0, devkit_1.updateJson)(host, 'nx.json', (json) => {
        if (!json.tasksRunnerOptions?.default?.options?.cacheableOperations?.includes('build-custom-server') &&
            json.tasksRunnerOptions?.default?.options?.cacheableOperations) {
            json.tasksRunnerOptions.default.options.cacheableOperations.push('build-custom-server');
        }
        json.targetDefaults ??= {};
        json.targetDefaults['build-custom-server'] ??= {};
        json.targetDefaults['build-custom-server'].cache ??= true;
        return json;
    });
}
exports.customServerGenerator = customServerGenerator;
