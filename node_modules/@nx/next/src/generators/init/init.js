"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nextInitGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const update_package_scripts_1 = require("@nx/devkit/src/utils/update-package-scripts");
const versions_1 = require("@nx/react/src/utils/versions");
const plugin_1 = require("../../plugins/plugin");
const add_gitignore_entry_1 = require("../../utils/add-gitignore-entry");
const versions_2 = require("../../utils/versions");
const add_plugin_1 = require("./lib/add-plugin");
function updateDependencies(host, schema) {
    const tasks = [];
    tasks.push((0, devkit_1.removeDependenciesFromPackageJson)(host, ['@nx/next'], []));
    tasks.push((0, devkit_1.addDependenciesToPackageJson)(host, {
        next: versions_2.nextVersion,
        react: versions_1.reactVersion,
        'react-dom': versions_1.reactDomVersion,
    }, {
        '@nx/next': versions_2.nxVersion,
    }, undefined, schema.keepExistingVersions));
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
async function nextInitGenerator(host, schema) {
    if (process.env.NX_PCV3 === 'true') {
        (0, add_plugin_1.addPlugin)(host);
    }
    (0, add_gitignore_entry_1.addGitIgnoreEntry)(host);
    let installTask = () => { };
    if (!schema.skipPackageJson) {
        installTask = updateDependencies(host, schema);
    }
    if (schema.updatePackageScripts) {
        await (0, update_package_scripts_1.updatePackageScripts)(host, plugin_1.createNodes);
    }
    return installTask;
}
exports.nextInitGenerator = nextInitGenerator;
exports.default = nextInitGenerator;
