"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pageGeneratorInternal = exports.pageGenerator = void 0;
const react_1 = require("@nx/react");
const devkit_1 = require("@nx/devkit");
const styles_1 = require("../../utils/styles");
const artifact_name_and_directory_utils_1 = require("@nx/devkit/src/generators/artifact-name-and-directory-utils");
async function pageGenerator(host, schema) {
    return pageGeneratorInternal(host, {
        nameAndDirectoryFormat: 'derived',
        ...schema,
    });
}
exports.pageGenerator = pageGenerator;
/*
 * This schematic is basically the React component one, but for Next we need
 * extra dependencies for css, sass, less style options, and make sure
 * it is under `pages` folder.
 */
async function pageGeneratorInternal(host, schema) {
    const options = await normalizeOptions(host, schema);
    const componentTask = await (0, react_1.componentGenerator)(host, {
        ...options,
        isNextPage: true,
        nameAndDirectoryFormat: 'as-provided', // already determined the directory so use as is
        export: false,
        classComponent: false,
        routing: false,
        skipTests: !options.withTests,
        skipFormat: true,
    });
    const project = (0, devkit_1.readProjectConfiguration)(host, options.projectName);
    const styledTask = (0, styles_1.addStyleDependencies)(host, {
        style: options.style,
        swc: !host.exists((0, devkit_1.joinPathFragments)(project.root, '.babelrc')),
    });
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(host);
    }
    return (0, devkit_1.runTasksInSerial)(componentTask, styledTask);
}
exports.pageGeneratorInternal = pageGeneratorInternal;
async function normalizeOptions(host, options) {
    let isAppRouter;
    let derivedDirectory;
    let routerDirectory;
    if (options.project) {
        // Legacy behavior, detect app vs page router from specified project.
        // TODO(v18): remove this logic
        const project = (0, devkit_1.readProjectConfiguration)(host, options.project);
        // app/ is a reserved folder in nextjs so it is safe to check it's existence
        isAppRouter =
            host.exists(`${project.root}/app`) ||
                host.exists(`${project.root}/src/app`);
        routerDirectory = isAppRouter ? 'app' : 'pages';
        derivedDirectory = options.directory
            ? `${routerDirectory}/${options.directory}`
            : `${routerDirectory}`;
    }
    else {
        // Get the project name first so we can determine the router directory
        const { project: determinedProjectName } = await (0, artifact_name_and_directory_utils_1.determineArtifactNameAndDirectoryOptions)(host, {
            artifactType: 'page',
            callingGenerator: '@nx/next:page',
            name: options.name,
            directory: options.directory,
        });
        const project = (0, devkit_1.readProjectConfiguration)(host, determinedProjectName);
        // app/ is a reserved folder in nextjs so it is safe to check it's existence
        isAppRouter =
            host.exists(`${project.root}/app`) ||
                host.exists(`${project.root}/src/app`);
        routerDirectory = isAppRouter ? 'app' : 'pages';
        // New behavior, use directory as is without detecting whether we're using app or pages router.
        derivedDirectory = options.directory;
    }
    const { artifactName: name, project: projectName, fileName, directory, } = await (0, artifact_name_and_directory_utils_1.determineArtifactNameAndDirectoryOptions)(host, {
        artifactType: 'page',
        callingGenerator: '@nx/next:page',
        name: options.name,
        fileName: isAppRouter ? 'page' : 'index',
        directory: options.directory,
        derivedDirectory,
        flat: options.flat,
        nameAndDirectoryFormat: options.nameAndDirectoryFormat,
        project: options.project,
        fileExtension: 'tsx',
    });
    return {
        ...options,
        directory,
        fileName,
        projectName,
    };
}
exports.default = pageGenerator;
