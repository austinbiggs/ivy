"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationGeneratorInternal = exports.applicationGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const versions_1 = require("@nx/react/src/utils/versions");
const normalize_options_1 = require("./lib/normalize-options");
const add_e2e_1 = require("./lib/add-e2e");
const add_jest_1 = require("./lib/add-jest");
const add_project_1 = require("./lib/add-project");
const create_application_files_1 = require("./lib/create-application-files");
const set_defaults_1 = require("./lib/set-defaults");
const update_jest_config_1 = require("./lib/update-jest-config");
const init_1 = require("../init/init");
const styles_1 = require("../../utils/styles");
const add_linting_1 = require("./lib/add-linting");
const custom_server_1 = require("../custom-server/custom-server");
const update_cypress_tsconfig_1 = require("./lib/update-cypress-tsconfig");
const show_possible_warnings_1 = require("./lib/show-possible-warnings");
const versions_2 = require("../../utils/versions");
async function applicationGenerator(host, schema) {
    return await applicationGeneratorInternal(host, {
        projectNameAndRootFormat: 'derived',
        ...schema,
    });
}
exports.applicationGenerator = applicationGenerator;
async function applicationGeneratorInternal(host, schema) {
    const tasks = [];
    const options = await (0, normalize_options_1.normalizeOptions)(host, schema);
    (0, show_possible_warnings_1.showPossibleWarnings)(host, options);
    const jsInitTask = await (0, js_1.initGenerator)(host, {
        js: options.js,
        skipPackageJson: options.skipPackageJson,
        skipFormat: true,
    });
    tasks.push(jsInitTask);
    const nextTask = await (0, init_1.nextInitGenerator)(host, {
        ...options,
        skipFormat: true,
    });
    tasks.push(nextTask);
    (0, create_application_files_1.createApplicationFiles)(host, options);
    (0, add_project_1.addProject)(host, options);
    const e2eTask = await (0, add_e2e_1.addE2e)(host, options);
    tasks.push(e2eTask);
    const jestTask = await (0, add_jest_1.addJest)(host, options);
    tasks.push(jestTask);
    const lintTask = await (0, add_linting_1.addLinting)(host, options);
    tasks.push(lintTask);
    const styledTask = (0, styles_1.addStyleDependencies)(host, {
        style: options.style,
        swc: !host.exists((0, devkit_1.joinPathFragments)(options.appProjectRoot, '.babelrc')),
    });
    tasks.push(styledTask);
    (0, update_jest_config_1.updateJestConfig)(host, options);
    (0, update_cypress_tsconfig_1.updateCypressTsConfig)(host, options);
    (0, set_defaults_1.setDefaults)(host, options);
    if (options.customServer) {
        await (0, custom_server_1.customServerGenerator)(host, {
            project: options.projectName,
            compiler: options.swc ? 'swc' : 'tsc',
        });
    }
    if (!options.skipPackageJson) {
        const devDependencies = {
            '@types/react': versions_1.typesReactVersion,
            '@types/react-dom': versions_1.typesReactDomVersion,
        };
        if (schema.unitTestRunner && schema.unitTestRunner !== 'none') {
            devDependencies['@testing-library/react'] = versions_1.testingLibraryReactVersion;
        }
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(host, { tslib: versions_2.tsLibVersion }, devDependencies));
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(host);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.applicationGeneratorInternal = applicationGeneratorInternal;
