"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addLinting = void 0;
const eslint_1 = require("@nx/eslint");
const devkit_1 = require("@nx/devkit");
const lint_1 = require("@nx/react/src/utils/lint");
const eslint_file_1 = require("@nx/eslint/src/generators/utils/eslint-file");
const versions_1 = require("../../../utils/versions");
async function addLinting(host, options) {
    const tasks = [];
    tasks.push(await (0, eslint_1.lintProjectGenerator)(host, {
        linter: options.linter,
        project: options.projectName,
        tsConfigPaths: [
            (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'tsconfig.app.json'),
        ],
        unitTestRunner: options.unitTestRunner,
        skipFormat: true,
        rootProject: options.rootProject,
        setParserOptionsProject: options.setParserOptionsProject,
    }));
    if (options.linter === eslint_1.Linter.EsLint && (0, eslint_file_1.isEslintConfigSupported)(host)) {
        (0, eslint_file_1.addExtendsToLintConfig)(host, options.appProjectRoot, [
            'plugin:@nx/react-typescript',
            'next',
            'next/core-web-vitals',
        ]);
        (0, eslint_file_1.updateOverrideInLintConfig)(host, options.appProjectRoot, (o) => Array.isArray(o.files) &&
            o.files.some((f) => f.match(/\*\.ts$/)) &&
            o.files.some((f) => f.match(/\*\.tsx$/)) &&
            o.files.some((f) => f.match(/\*\.js$/)) &&
            o.files.some((f) => f.match(/\*\.jsx$/)), (o) => ({
            ...o,
            rules: {
                ...o.rules,
                '@next/next/no-html-link-for-pages': [
                    'error',
                    `${options.appProjectRoot}/pages`,
                ],
            },
        }));
        // add jest specific config
        if (options.unitTestRunner === 'jest') {
            (0, eslint_file_1.addOverrideToLintConfig)(host, options.appProjectRoot, {
                files: ['*.spec.ts', '*.spec.tsx', '*.spec.js', '*.spec.jsx'],
                env: {
                    jest: true,
                },
            });
        }
        (0, eslint_file_1.addIgnoresToLintConfig)(host, options.appProjectRoot, ['.next/**/*']);
    }
    if (!options.skipPackageJson) {
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(host, lint_1.extraEslintDependencies.dependencies, {
            ...lint_1.extraEslintDependencies.devDependencies,
            'eslint-config-next': versions_1.eslintConfigNextVersion,
        }));
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.addLinting = addLinting;
