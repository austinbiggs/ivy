"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addE2e = void 0;
const devkit_1 = require("@nx/devkit");
const web_1 = require("@nx/web");
const versions_1 = require("../../../utils/versions");
const has_webpack_plugin_1 = require("../../../utils/has-webpack-plugin");
const has_vite_plugin_1 = require("../../../utils/has-vite-plugin");
async function addE2e(tree, options) {
    switch (options.e2eTestRunner) {
        case 'cypress': {
            const hasNxBuildPlugin = (options.bundler === 'webpack' && (0, has_webpack_plugin_1.hasWebpackPlugin)(tree)) ||
                (options.bundler === 'vite' && (0, has_vite_plugin_1.hasVitePlugin)(tree));
            if (!hasNxBuildPlugin) {
                (0, web_1.webStaticServeGenerator)(tree, {
                    buildTarget: `${options.projectName}:build`,
                    targetName: 'serve-static',
                });
            }
            const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/cypress', versions_1.nxVersion);
            (0, devkit_1.addProjectConfiguration)(tree, options.e2eProjectName, {
                projectType: 'application',
                root: options.e2eProjectRoot,
                sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
                targets: {},
                implicitDependencies: [options.projectName],
                tags: [],
            });
            return await configurationGenerator(tree, {
                ...options,
                project: options.e2eProjectName,
                directory: 'src',
                // the name and root are already normalized, instruct the generator to use them as is
                bundler: options.bundler === 'rspack' ? 'webpack' : options.bundler,
                skipFormat: true,
                devServerTarget: `${options.projectName}:serve`,
                baseUrl: 'http://localhost:4200',
                jsx: true,
                rootProject: options.rootProject,
                webServerCommands: hasNxBuildPlugin
                    ? {
                        default: `nx run ${options.projectName}:serve`,
                        production: `nx run ${options.projectName}:preview`,
                    }
                    : undefined,
                ciWebServerCommand: hasNxBuildPlugin
                    ? `nx run ${options.projectName}:serve-static`
                    : undefined,
            });
        }
        case 'playwright': {
            const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/playwright', versions_1.nxVersion);
            (0, devkit_1.addProjectConfiguration)(tree, options.e2eProjectName, {
                projectType: 'application',
                root: options.e2eProjectRoot,
                sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
                targets: {},
                implicitDependencies: [options.projectName],
            });
            return configurationGenerator(tree, {
                project: options.e2eProjectName,
                skipFormat: true,
                skipPackageJson: options.skipPackageJson,
                directory: 'src',
                js: false,
                linter: options.linter,
                setParserOptionsProject: options.setParserOptionsProject,
                webServerCommand: `${(0, devkit_1.getPackageManagerCommand)().exec} nx serve ${options.name}`,
                webServerAddress: 'http://localhost:4200',
                rootProject: options.rootProject,
            });
        }
        case 'none':
        default:
            return () => { };
    }
}
exports.addE2e = addE2e;
