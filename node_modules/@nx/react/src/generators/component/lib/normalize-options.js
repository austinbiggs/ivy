"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const devkit_1 = require("@nx/devkit");
const artifact_name_and_directory_utils_1 = require("@nx/devkit/src/generators/artifact-name-and-directory-utils");
const assertion_1 = require("../../../utils/assertion");
async function normalizeOptions(tree, options) {
    (0, assertion_1.assertValidStyle)(options.style);
    const { artifactName: name, directory, fileName, filePath, project: projectName, } = await (0, artifact_name_and_directory_utils_1.determineArtifactNameAndDirectoryOptions)(tree, {
        artifactType: 'component',
        callingGenerator: '@nx/react:component',
        name: options.name,
        directory: options.directory,
        derivedDirectory: options.derivedDirectory ?? options.directory,
        flat: options.flat,
        nameAndDirectoryFormat: options.nameAndDirectoryFormat,
        project: options.project,
        fileExtension: 'tsx',
        fileName: options.fileName,
        pascalCaseFile: options.pascalCaseFiles,
        pascalCaseDirectory: options.pascalCaseDirectory,
    });
    const project = (0, devkit_1.readProjectConfiguration)(tree, projectName);
    const { className } = (0, devkit_1.names)(name);
    const { sourceRoot: projectSourceRoot, root: projectRoot, projectType, } = project;
    const styledModule = /^(css|scss|less|none)$/.test(options.style)
        ? null
        : options.style;
    if (options.export && projectType === 'application') {
        devkit_1.logger.warn(`The "--export" option should not be used with applications and will do nothing.`);
    }
    options.classComponent = options.classComponent ?? false;
    options.routing = options.routing ?? false;
    options.globalCss = options.globalCss ?? false;
    options.inSourceTests = options.inSourceTests ?? false;
    //TODO (nicholas): Remove when Next page generator is removed
    options.isNextPage = options.isNextPage ?? false;
    return {
        ...options,
        projectName,
        directory,
        styledModule,
        hasStyles: options.style !== 'none',
        className,
        fileName,
        filePath,
        projectSourceRoot: projectSourceRoot ?? projectRoot,
    };
}
exports.normalizeOptions = normalizeOptions;
