"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeRemoteDirectory = exports.normalizeRemoteName = void 0;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
async function normalizeRemoteName(tree, remote, options) {
    const { projectName: remoteName } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(tree, {
        name: remote,
        projectType: 'application',
        directory: options.directory,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
        callingGenerator: '@nx/react:host',
    });
    return remoteName;
}
exports.normalizeRemoteName = normalizeRemoteName;
function normalizeRemoteDirectory(remote, options) {
    if (options.projectNameAndRootFormat === 'derived' || !options.directory) {
        return options.directory;
    }
    /**
     * With the `as-provided` format, the provided directory would be the root
     * of the host application. Append the remote name to the host parent
     * directory to get the remote directory.
     */
    return (0, devkit_1.joinPathFragments)(options.directory, '..', remote);
}
exports.normalizeRemoteDirectory = normalizeRemoteDirectory;
