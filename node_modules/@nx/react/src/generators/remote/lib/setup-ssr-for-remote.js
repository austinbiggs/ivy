"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupSsrForRemote = void 0;
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../../utils/versions");
async function setupSsrForRemote(tree, options, appName) {
    const tasks = [];
    const project = (0, devkit_1.readProjectConfiguration)(tree, appName);
    const pathToModuleFederationSsrFiles = options.typescriptConfiguration
        ? 'module-federation-ssr-ts'
        : 'module-federation-ssr';
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, `../files/${pathToModuleFederationSsrFiles}`), project.root, {
        ...options,
        appName,
        tmpl: '',
        browserBuildOutputPath: project.targets.build.options.outputPath,
        serverBuildOutputPath: project.targets.server.options.outputPath,
    });
    // For hosts to use when running remotes in static mode.
    const originalOutputPath = project.targets.build?.options?.outputPath;
    const serverOptions = project.targets.server?.options;
    const serverOutputPath = serverOptions?.outputPath ??
        (0, devkit_1.joinPathFragments)(originalOutputPath, 'server');
    const serverOutputName = serverOptions?.outputFileName ?? 'main.js';
    project.targets['serve-static'] = {
        dependsOn: ['build', 'server'],
        executor: 'nx:run-commands',
        defaultConfiguration: 'development',
        options: {
            command: `PORT=${options.devServerPort ?? 4200} node ${(0, devkit_1.joinPathFragments)(serverOutputPath, serverOutputName)}`,
        },
    };
    (0, devkit_1.updateProjectConfiguration)(tree, appName, project);
    const installTask = (0, devkit_1.addDependenciesToPackageJson)(tree, {
        '@module-federation/node': versions_1.moduleFederationNodeVersion,
    }, {});
    tasks.push(installTask);
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.setupSsrForRemote = setupSsrForRemote;
