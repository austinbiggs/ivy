"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyReactConfig = void 0;
function applyReactConfig(options, config = {}) {
    if (!process.env['NX_TASK_TARGET_PROJECT'])
        return;
    addHotReload(config);
    if (options.svgr !== false) {
        removeSvgLoaderIfPresent(config);
        config.module.rules.push({
            test: /\.svg$/,
            issuer: /\.(js|ts|md)x?$/,
            use: [
                {
                    loader: require.resolve('@svgr/webpack'),
                    options: {
                        svgo: false,
                        titleProp: true,
                        ref: true,
                    },
                },
                {
                    loader: require.resolve('file-loader'),
                    options: {
                        name: '[name].[hash].[ext]',
                    },
                },
            ],
        });
    }
    // enable webpack node api
    config.node = {
        __dirname: true,
        __filename: true,
    };
}
exports.applyReactConfig = applyReactConfig;
function addHotReload(config) {
    if (config.mode === 'development' && config['devServer']?.hot) {
        // add `react-refresh/babel` to babel loader plugin
        const babelLoader = config.module.rules.find((rule) => rule &&
            typeof rule !== 'string' &&
            rule.loader?.toString().includes('babel-loader'));
        if (babelLoader && typeof babelLoader !== 'string') {
            babelLoader.options['plugins'] = [
                ...(babelLoader.options['plugins'] || []),
                [
                    require.resolve('react-refresh/babel'),
                    {
                        skipEnvCheck: true,
                    },
                ],
            ];
        }
        const ReactRefreshPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
        config.plugins.push(new ReactRefreshPlugin());
    }
}
// We remove potentially conflicting rules that target SVGs because we use @svgr/webpack loader
// See https://github.com/nrwl/nx/issues/14383
function removeSvgLoaderIfPresent(config) {
    const svgLoaderIdx = config.module.rules.findIndex((rule) => typeof rule === 'object' && rule.test.toString().includes('svg'));
    if (svgLoaderIdx === -1)
        return;
    config.module.rules.splice(svgLoaderIdx, 1);
}
