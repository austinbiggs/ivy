"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ciWorkflowGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const default_base_1 = require("../../utilities/default-base");
const path_1 = require("path");
async function ciWorkflowGenerator(host, schema) {
    const ci = schema.ci;
    const options = normalizeOptions(schema);
    const nxJson = (0, devkit_1.readJson)(host, 'nx.json');
    const nxCloudUsed = nxJson.nxCloudAccessToken ??
        Object.values(nxJson.tasksRunnerOptions ?? {}).find((r) => r.runner == '@nrwl/nx-cloud' || r.runner == 'nx-cloud');
    if (!nxCloudUsed) {
        throw new Error('This workspace is not connected to Nx Cloud.');
    }
    if (ci === 'bitbucket-pipelines' && defaultBranchNeedsOriginPrefix(nxJson)) {
        (0, devkit_1.writeJson)(host, 'nx.json', appendOriginPrefix(nxJson));
    }
    (0, devkit_1.generateFiles)(host, (0, path_1.join)(__dirname, 'files', ci), '', options);
    await (0, devkit_1.formatFiles)(host);
}
exports.ciWorkflowGenerator = ciWorkflowGenerator;
function normalizeOptions(options) {
    const { name: workflowName, fileName: workflowFileName } = (0, devkit_1.names)(options.name);
    const packageManager = (0, devkit_1.detectPackageManager)();
    const { exec: packageManagerPrefix, ciInstall: packageManagerInstall } = (0, devkit_1.getPackageManagerCommand)(packageManager);
    return {
        workflowName,
        workflowFileName,
        packageManager,
        packageManagerInstall,
        packageManagerPrefix,
        mainBranch: (0, default_base_1.deduceDefaultBase)(),
        tmpl: '',
    };
}
function defaultBranchNeedsOriginPrefix(nxJson) {
    return !nxJson.affected?.defaultBase?.startsWith('origin/');
}
function appendOriginPrefix(nxJson) {
    return {
        ...nxJson,
        affected: {
            ...(nxJson.affected ?? {}),
            defaultBase: nxJson.affected?.defaultBase
                ? `origin/${nxJson.affected.defaultBase}`
                : 'origin/main',
        },
    };
}
